# x-default-logging: &logging
#   driver: "json-file"
#   options:
#     max-size: "5m"
#     max-file: "2"

networks:
  otel:
    name: otel-test
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
#   accountingservice:
#   image: ${IMAGE_NAME}:${IMAGE_VERSION}-accountingservice
#   container_name: accounting-services
  
  # OpenTelemetry Collector
  otel-collector:
    # image: ${COLLECTOR_CONTRIB_IMAGE}
    image: otel/opentelemetry-collector:latest
    container_name: opentelemetry-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./config/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./config/otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
      - ./log/telemetry/:/etc/output:rw # Storage the logs (not commited in git)
    ports:
      # - "${OTEL_COLLECTOR_PORT_GRPC}"
      # - "${OTEL_COLLECTOR_PORT_HTTP}"
      - "8888:8888"  # Prometheus metrics exposed by the collector  http://localhost:8888/metrics
      - "8889:8889"  # Prometheus exporter metrics
      # - "13133:13133"
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP http receiver
    networks:
      - otel
    # depends_on:
    #   - jaeger
    # logging: *logging
    # environment:
    #   - 8083
   
  # Prometheus
  prometheus:
    # image: ${PROMETHEUS_IMAGE}
    # image: quay.io/prometheus/prometheus:v2.51.2
    # image: bitnami/prometheus
    image: prom/prometheus:latest
    container_name: prometheus
    # command:
    #   - --web.console.templates=/etc/prometheus/consoles
    #   - --web.console.libraries=/etc/prometheus/console_libraries
    #   - --storage.tsdb.retention.time=1h
    #   - --config.file=/etc/prometheus/prometheus-config.yaml
    #   - --storage.tsdb.path=/prometheus
    #   - --web.enable-lifecycle
    #   - --web.route-prefix=/
    #   - --enable-feature=exemplar-storage
    #   - --enable-feature=otlp-write-receiver
    volumes:
      - ./config/prometheus/prometheus-config.yml:/etc/prometheus/prometheus-config.yml
      - prometheus-data:/prometheus
    command:
     - '--config.file=/etc/prometheus/prometheus-config.yml'
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - otel
    # ports:
    #    - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    # logging: *logging

  # Grafana
  grafana:
    image: grafana/grafana:latest
    # image: ${GRAFANA_IMAGE}
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - otel
    # ports:
    #   - "${GRAFANA_SERVICE_PORT}"
    # logging: *logging


  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    deploy:
          resources:
            limits:
              memory: 500M
    ports:
          - "16686:16686"                    # Jaeger UI
          - "4317"                           # OTLP gRPC default port
          - "4318"                           # OTLP HTTP default port (protobuf)
          - "14250"
    environment:
      - LOG_LEVEL=debug
      - METRICS_STORAGE_TYPE=prometheus
    restart: unless-stopped
    networks:
      - otel

  #zipkin
  # zipkin:
  #   container_name: zipkin-traces
  #   image: openzipkin/zipkin:latest
  #   ports:
  #     - "9411:9411"
      